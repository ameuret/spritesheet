require "zed/spritesheet/version"

module ZED
  class SpriteSheet

    PATH_REGEXP = /([.\/\w]*?)([-\w\d_]+)$/.freeze
    PROJECT_URL = 'https://github.com/ameuret/zed-spritesheet'.freeze

    attr_reader :sprites, :pathBaseName, :path, :baseName
    
    def initialize(pathBaseName, useExternalFiles = false)
      @sprites = {}
      @pathBaseName = pathBaseName
      @externalSprites = useExternalFiles
      
      splitPath @pathBaseName
      importXML
      checkExternalFilePresence if useExternalFiles
    end

    
    def [](name)
      s = @sprites[name]
      {path: (@externalSprites ? (@path + name) : @pathBaseName) + '.png',
       tile_x: s[:x],
       tile_y: s[:y],
       tile_w: s[:w],
       tile_h: s[:h]}
    end

    def export(forcedSpritePath = nil, outputPath = nil)
      importXML forcedSpritePath if forcedSpritePath
      outputPath ||= @pathBaseName + '.rb'
      if outputPath == STDOUT
        f = $stdout
      else
        f = File.open(outputPath, 'w+')
      end
      f.write("#Generated by SpriteSheet#export ( http://github.com/ameuret/spritesheet).\n# DO NOT EDIT.\n")
      f.write("module SpriteSheet\n")
      f.write("module #{@baseName.capitalize}\n")
      f.write("sprites = #{@sprites.to_s}\n")
      f.write("end\nend\n")
      f.close unless f == STDOUT
    end

    def importXML(forcedPath = nil)
      declaredPath = forcedPath || @path
      declaredPath += '/' unless declaredPath[-1] == '/'
      File.read(@pathBaseName + '.xml').each_line do
        |l|
        if l =~ /SubTexture\s+name="([-\w\d_]+).png"/
          name = $1
          if l =~ /x\s*=\s*"(\d+)"\s+y\s*=\s*"(\d+)"/
            x = Integer $1
            y = Integer $2
            if l =~ /width\s*=\s*"(\d+)"\s+height\s*=\s*"(\d+)"/
              w = Integer $1
              h = Integer $2
              @sprites[name] = {path: declaredPath + name + '.png', x:x, y:y, w:w, h:h}
            end
          end
          raise "Unsupported sprite sheet entry: #{l}" unless @sprites[name]
        end
      end
    end

    protected
    def splitPath(fullPath)
      # Verify regex at https://regex101.com/r/Qc7vrL/1
      raise "Unrecognized path syntax: #{fullPath}" unless
        fullPath =~ PATH_REGEXP
      @path = $1 || ''
      @baseName = $2
    end

    def checkExternalFilePresence
      @sprites.each {|k, v|
        #        puts "k: #{k}"
        #        puts "v: #{v}"
        File.read @path + k + '.png'}
    end
  end
end

